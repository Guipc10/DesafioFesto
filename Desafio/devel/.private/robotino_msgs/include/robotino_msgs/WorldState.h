// Generated by gencpp from file robotino_msgs/WorldState.msg
// DO NOT EDIT!


#ifndef ROBOTINO_MSGS_MESSAGE_WORLDSTATE_H
#define ROBOTINO_MSGS_MESSAGE_WORLDSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robotino_msgs/Machine.h>
#include <robotino_msgs/DistrCenter.h>

namespace robotino_msgs
{
template <class ContainerAllocator>
struct WorldState_
{
  typedef WorldState_<ContainerAllocator> Type;

  WorldState_()
    : stamp()
    , machAmarela(0)
    , machVermelha(0)
    , machAzul(0)
    , task(0)
    , currPuck(0)
    , machines()
    , dcs()
    , inAction(false)
    , terminate(false)
    , stuck(false)  {
    }
  WorldState_(const ContainerAllocator& _alloc)
    : stamp()
    , machAmarela(0)
    , machVermelha(0)
    , machAzul(0)
    , task(0)
    , currPuck(0)
    , machines(_alloc)
    , dcs(_alloc)
    , inAction(false)
    , terminate(false)
    , stuck(false)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef int32_t _machAmarela_type;
  _machAmarela_type machAmarela;

   typedef int32_t _machVermelha_type;
  _machVermelha_type machVermelha;

   typedef int32_t _machAzul_type;
  _machAzul_type machAzul;

   typedef uint32_t _task_type;
  _task_type task;

   typedef uint32_t _currPuck_type;
  _currPuck_type currPuck;

   typedef std::vector< ::robotino_msgs::Machine_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::robotino_msgs::Machine_<ContainerAllocator> >::other >  _machines_type;
  _machines_type machines;

   typedef std::vector< ::robotino_msgs::DistrCenter_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::robotino_msgs::DistrCenter_<ContainerAllocator> >::other >  _dcs_type;
  _dcs_type dcs;

   typedef uint8_t _inAction_type;
  _inAction_type inAction;

   typedef uint8_t _terminate_type;
  _terminate_type terminate;

   typedef uint8_t _stuck_type;
  _stuck_type stuck;




  typedef boost::shared_ptr< ::robotino_msgs::WorldState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotino_msgs::WorldState_<ContainerAllocator> const> ConstPtr;

}; // struct WorldState_

typedef ::robotino_msgs::WorldState_<std::allocator<void> > WorldState;

typedef boost::shared_ptr< ::robotino_msgs::WorldState > WorldStatePtr;
typedef boost::shared_ptr< ::robotino_msgs::WorldState const> WorldStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotino_msgs::WorldState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotino_msgs::WorldState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robotino_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'robotino_msgs': ['/home/guiloko/Desafio/src/robotino_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robotino_msgs::WorldState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotino_msgs::WorldState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotino_msgs::WorldState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotino_msgs::WorldState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotino_msgs::WorldState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotino_msgs::WorldState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotino_msgs::WorldState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4b2daee63b7ff8016cc89ebef6f22495";
  }

  static const char* value(const ::robotino_msgs::WorldState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4b2daee63b7ff801ULL;
  static const uint64_t static_value2 = 0x6cc89ebef6f22495ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotino_msgs::WorldState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotino_msgs/WorldState";
  }

  static const char* value(const ::robotino_msgs::WorldState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotino_msgs::WorldState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n\
int32 machAmarela\n\
int32 machVermelha\n\
int32 machAzul\n\
uint32 task\n\
uint32 currPuck\n\
Machine[] machines\n\
DistrCenter[] dcs\n\
bool inAction\n\
bool terminate\n\
bool stuck\n\
\n\
================================================================================\n\
MSG: robotino_msgs/Machine\n\
uint32 id\n\
geometry_msgs/Pose2D mapPose\n\
geometry_msgs/Pose2D goalPose\n\
int32 puck\n\
bool isActive\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
================================================================================\n\
MSG: robotino_msgs/DistrCenter\n\
geometry_msgs/Pose2D mapPose\n\
geometry_msgs/Pose2D goalPose\n\
int32 puck1\n\
int32 puck2\n\
bool isActive\n\
\n\
";
  }

  static const char* value(const ::robotino_msgs::WorldState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotino_msgs::WorldState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.machAmarela);
      stream.next(m.machVermelha);
      stream.next(m.machAzul);
      stream.next(m.task);
      stream.next(m.currPuck);
      stream.next(m.machines);
      stream.next(m.dcs);
      stream.next(m.inAction);
      stream.next(m.terminate);
      stream.next(m.stuck);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WorldState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotino_msgs::WorldState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotino_msgs::WorldState_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "machAmarela: ";
    Printer<int32_t>::stream(s, indent + "  ", v.machAmarela);
    s << indent << "machVermelha: ";
    Printer<int32_t>::stream(s, indent + "  ", v.machVermelha);
    s << indent << "machAzul: ";
    Printer<int32_t>::stream(s, indent + "  ", v.machAzul);
    s << indent << "task: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.task);
    s << indent << "currPuck: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.currPuck);
    s << indent << "machines[]" << std::endl;
    for (size_t i = 0; i < v.machines.size(); ++i)
    {
      s << indent << "  machines[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robotino_msgs::Machine_<ContainerAllocator> >::stream(s, indent + "    ", v.machines[i]);
    }
    s << indent << "dcs[]" << std::endl;
    for (size_t i = 0; i < v.dcs.size(); ++i)
    {
      s << indent << "  dcs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robotino_msgs::DistrCenter_<ContainerAllocator> >::stream(s, indent + "    ", v.dcs[i]);
    }
    s << indent << "inAction: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.inAction);
    s << indent << "terminate: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.terminate);
    s << indent << "stuck: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stuck);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTINO_MSGS_MESSAGE_WORLDSTATE_H
