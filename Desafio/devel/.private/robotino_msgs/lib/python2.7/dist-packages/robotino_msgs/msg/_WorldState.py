# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robotino_msgs/WorldState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import genpy
import robotino_msgs.msg

class WorldState(genpy.Message):
  _md5sum = "4b2daee63b7ff8016cc89ebef6f22495"
  _type = "robotino_msgs/WorldState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """time stamp
int32 machAmarela
int32 machVermelha
int32 machAzul
uint32 task
uint32 currPuck
Machine[] machines
DistrCenter[] dcs
bool inAction
bool terminate
bool stuck

================================================================================
MSG: robotino_msgs/Machine
uint32 id
geometry_msgs/Pose2D mapPose
geometry_msgs/Pose2D goalPose
int32 puck
bool isActive




================================================================================
MSG: geometry_msgs/Pose2D
# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta
================================================================================
MSG: robotino_msgs/DistrCenter
geometry_msgs/Pose2D mapPose
geometry_msgs/Pose2D goalPose
int32 puck1
int32 puck2
bool isActive

"""
  __slots__ = ['stamp','machAmarela','machVermelha','machAzul','task','currPuck','machines','dcs','inAction','terminate','stuck']
  _slot_types = ['time','int32','int32','int32','uint32','uint32','robotino_msgs/Machine[]','robotino_msgs/DistrCenter[]','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,machAmarela,machVermelha,machAzul,task,currPuck,machines,dcs,inAction,terminate,stuck

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WorldState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.machAmarela is None:
        self.machAmarela = 0
      if self.machVermelha is None:
        self.machVermelha = 0
      if self.machAzul is None:
        self.machAzul = 0
      if self.task is None:
        self.task = 0
      if self.currPuck is None:
        self.currPuck = 0
      if self.machines is None:
        self.machines = []
      if self.dcs is None:
        self.dcs = []
      if self.inAction is None:
        self.inAction = False
      if self.terminate is None:
        self.terminate = False
      if self.stuck is None:
        self.stuck = False
    else:
      self.stamp = genpy.Time()
      self.machAmarela = 0
      self.machVermelha = 0
      self.machAzul = 0
      self.task = 0
      self.currPuck = 0
      self.machines = []
      self.dcs = []
      self.inAction = False
      self.terminate = False
      self.stuck = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I3i2I().pack(_x.stamp.secs, _x.stamp.nsecs, _x.machAmarela, _x.machVermelha, _x.machAzul, _x.task, _x.currPuck))
      length = len(self.machines)
      buff.write(_struct_I.pack(length))
      for val1 in self.machines:
        buff.write(_get_struct_I().pack(val1.id))
        _v1 = val1.mapPose
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _v2 = val1.goalPose
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _x = val1
        buff.write(_get_struct_iB().pack(_x.puck, _x.isActive))
      length = len(self.dcs)
      buff.write(_struct_I.pack(length))
      for val1 in self.dcs:
        _v3 = val1.mapPose
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _v4 = val1.goalPose
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _x = val1
        buff.write(_get_struct_2iB().pack(_x.puck1, _x.puck2, _x.isActive))
      _x = self
      buff.write(_get_struct_3B().pack(_x.inAction, _x.terminate, _x.stuck))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.machines is None:
        self.machines = None
      if self.dcs is None:
        self.dcs = None
      end = 0
      _x = self
      start = end
      end += 28
      (_x.stamp.secs, _x.stamp.nsecs, _x.machAmarela, _x.machVermelha, _x.machAzul, _x.task, _x.currPuck,) = _get_struct_2I3i2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.machines = []
      for i in range(0, length):
        val1 = robotino_msgs.msg.Machine()
        start = end
        end += 4
        (val1.id,) = _get_struct_I().unpack(str[start:end])
        _v5 = val1.mapPose
        _x = _v5
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        _v6 = val1.goalPose
        _x = _v6
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.puck, _x.isActive,) = _get_struct_iB().unpack(str[start:end])
        val1.isActive = bool(val1.isActive)
        self.machines.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.dcs = []
      for i in range(0, length):
        val1 = robotino_msgs.msg.DistrCenter()
        _v7 = val1.mapPose
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        _v8 = val1.goalPose
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 9
        (_x.puck1, _x.puck2, _x.isActive,) = _get_struct_2iB().unpack(str[start:end])
        val1.isActive = bool(val1.isActive)
        self.dcs.append(val1)
      _x = self
      start = end
      end += 3
      (_x.inAction, _x.terminate, _x.stuck,) = _get_struct_3B().unpack(str[start:end])
      self.inAction = bool(self.inAction)
      self.terminate = bool(self.terminate)
      self.stuck = bool(self.stuck)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I3i2I().pack(_x.stamp.secs, _x.stamp.nsecs, _x.machAmarela, _x.machVermelha, _x.machAzul, _x.task, _x.currPuck))
      length = len(self.machines)
      buff.write(_struct_I.pack(length))
      for val1 in self.machines:
        buff.write(_get_struct_I().pack(val1.id))
        _v9 = val1.mapPose
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _v10 = val1.goalPose
        _x = _v10
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _x = val1
        buff.write(_get_struct_iB().pack(_x.puck, _x.isActive))
      length = len(self.dcs)
      buff.write(_struct_I.pack(length))
      for val1 in self.dcs:
        _v11 = val1.mapPose
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _v12 = val1.goalPose
        _x = _v12
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _x = val1
        buff.write(_get_struct_2iB().pack(_x.puck1, _x.puck2, _x.isActive))
      _x = self
      buff.write(_get_struct_3B().pack(_x.inAction, _x.terminate, _x.stuck))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.machines is None:
        self.machines = None
      if self.dcs is None:
        self.dcs = None
      end = 0
      _x = self
      start = end
      end += 28
      (_x.stamp.secs, _x.stamp.nsecs, _x.machAmarela, _x.machVermelha, _x.machAzul, _x.task, _x.currPuck,) = _get_struct_2I3i2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.machines = []
      for i in range(0, length):
        val1 = robotino_msgs.msg.Machine()
        start = end
        end += 4
        (val1.id,) = _get_struct_I().unpack(str[start:end])
        _v13 = val1.mapPose
        _x = _v13
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        _v14 = val1.goalPose
        _x = _v14
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.puck, _x.isActive,) = _get_struct_iB().unpack(str[start:end])
        val1.isActive = bool(val1.isActive)
        self.machines.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.dcs = []
      for i in range(0, length):
        val1 = robotino_msgs.msg.DistrCenter()
        _v15 = val1.mapPose
        _x = _v15
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        _v16 = val1.goalPose
        _x = _v16
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 9
        (_x.puck1, _x.puck2, _x.isActive,) = _get_struct_2iB().unpack(str[start:end])
        val1.isActive = bool(val1.isActive)
        self.dcs.append(val1)
      _x = self
      start = end
      end += 3
      (_x.inAction, _x.terminate, _x.stuck,) = _get_struct_3B().unpack(str[start:end])
      self.inAction = bool(self.inAction)
      self.terminate = bool(self.terminate)
      self.stuck = bool(self.stuck)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_iB = None
def _get_struct_iB():
    global _struct_iB
    if _struct_iB is None:
        _struct_iB = struct.Struct("<iB")
    return _struct_iB
_struct_2iB = None
def _get_struct_2iB():
    global _struct_2iB
    if _struct_2iB is None:
        _struct_2iB = struct.Struct("<2iB")
    return _struct_2iB
_struct_2I3i2I = None
def _get_struct_2I3i2I():
    global _struct_2I3i2I
    if _struct_2I3i2I is None:
        _struct_2I3i2I = struct.Struct("<2I3i2I")
    return _struct_2I3i2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
